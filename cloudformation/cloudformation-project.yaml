AWSTemplateFormatVersion: "2010-09-09"
Description: "This is a template for VPC Nargis"

Parameters:
  MyName:
    Description: My Name for Tags
    Type: String
    Default: Nargis
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: "Enter the VPC CIDR"
  InstanceType:
    Description: "Instance Type for Auto Scaling Group"
    Type: String
    Default: "t2.micro"
    AllowedValues:
      - "t2.micro"
      - "t3.micro"
Mappings:
  AMIMappings:
    us-east-1:
      AmiId: ami-0c101f26f147fa7fd
    us-west-2:
      AmiId: ami-0d5ae304a0b933620

Resources:
  MyKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyFormat: pem
      KeyName: nari3
      KeyType: rsa
      Tags:
        - Key: Owner
          Value: !Ref MyName
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref MyName
      GroupDescription: Allows SSH and HTTP
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      Tags:
        - Key: Owner
          Value: !Ref MyName
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      Tags:
        - Key: owner
          Value: !Ref MyName
  pubSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: owner
          Value: !Ref MyName
  pubSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: owner
          Value: !Ref MyName
  privSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: "us-east-1a"
      Tags:
        - Key: owner
          Value: !Ref MyName
  privSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: "us-east-1b"
      Tags:
        - Key: owner
          Value: !Ref MyName
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: owner
          Value: !Ref MyName
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref myInternetGateway
  pubRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: owner
          Value: !Ref MyName
  pubRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref pubRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway
  pubSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref pubSubnet1
      RouteTableId: !Ref pubRouteTable
  pubSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref pubSubnet2
      RouteTableId: !Ref pubRouteTable
  
  #NAT for private subnets
  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: NATGatewayEIP
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref pubSubnet1
      Tags:
        - Key: owner
          Value: !Ref MyName
  # ELASTIC IP
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: myVPC
    Properties:
      Domain: vpc
  #PRIVATE ROUTING
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: owner
          Value: !Ref MyName
  RouteNATGateway:
    DependsOn: NATGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privSubnet2
      RouteTableId: !Ref PrivateRouteTable
  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: mylaunchtemplate
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        ImageId: !FindInMap [AMIMappings, !Ref "AWS::Region", AmiId]
        KeyName: !Ref MyKeyPair
        SecurityGroupIds:
          - !Ref MySecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash  
            yum install httpd -y 
            systemctl enable httpd 
            systemctl start httpd 
            echo "<h1>Hello, Nargis Temirkulova from ip $HOSTNAME!</h1>" > /var/www/html/index.html
  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      IpAddressType: ipv4
      SecurityGroups:
        - !Ref MySecurityGroup
      Subnets:
        - !Ref pubSubnet1
        - !Ref pubSubnet2
  MyALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref MyALB
      Port: 80
      Protocol: HTTP
  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref myVPC
  MyASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      MaxSize: 3
      MinSize: 1
      DesiredCapacity: 2
      VPCZoneIdentifier:
        - !Ref privSubnet1
        - !Ref privSubnet2
      TargetGroupARNs:
        - !Ref MyTargetGroup
Outputs:
  ALBEndpoint:
    Description: URL of the Application Load Balancer
    Value: !GetAtt MyALB.DNSName

#my cloudformation